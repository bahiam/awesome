/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;
use custom.awesome.connectors;

/**
* Snap click animation.
*/
public class AweSnapperDragAnimation extends DragAnimation {

    public AweGhost activeGhost;
    extend public void updateActiveGhost(SnapInfo info) {
        this.activeGhost = null;
        if(info as ConnectSnapInfo) {
            if(AweGhost ghost = info.attach.?getGhost()) {
                this.activeGhost = ghost;
            }
        }
        var envs = aweConnectEnv(info);
        this.activeGhost.?prepare(envs.v0, envs.v1);
    }

    public SnapInfo activeSnapInfo;

    extend public void snapInfoChanged(SnapInfo newInfo, AnimationMouseInfo mi) {
        if(newInfo as ConnectSnapInfo) {
            if(?AweConnectLine l = newInfo.snap) {
                l.trySnap(newInfo.attach, mi.mouseLine);
            }
        }
    }
    
    public void drawGraphs(LayerBuffer lb) {
        if(this.activeGhost) {
            this.activeGhost.get2D().?draw(lb);
        }

        if(activeSnapInfo as ConnectSnapInfo) {
            Line2D lineA = activeSnapInfo.attach().?snapper.?AweSnapper.?referenceLineInSpace();
            Line2D lineB = activeSnapInfo.snap().?snapper.?AweSnapper.?referenceLineInSpace();
            if(lineA and lineB) {
                AweAngleGraph angleGraph(lineA.v, lineB.v);
                angleGraph.draw(lb);
            }
        } 
    }

    public Primitive3D get3D(FetchEnv3D env) {
        if(this.activeGhost) {
            return this.activeGhost.get3D(env);
        }
        return null;
    }

    public Primitive3D toSpace(Primitive3D prim) {
        if(this.activeGhost and prim) {
            prim.setPosRot(this.activeGhost.ghostSnapper.pos, this.activeGhost.ghostSnapper.rot);
            prim = safeInstance3D([Primitive3D: prim]);
        }
        return prim;
    }

    public bool deny3D() {
        return false;
    }
    
    public PropObj end() {
        if(this.activeGhost) {
            var snapper = this.activeGhost.deploy();
            this.space.undoableInsert(snapper);
            modifyEnv << snapper;
            this.selection << snapper;
            this.toInsertInBsp << snapper;
            snapper.snapAllAligned();
            snapAllAligned(this.selection.main);
        }
        return super(..);
    }


    //Copied from DragAnimation then modified. Modifications are tagged with comment **** awesome modification ***.
    public void drag(AnimationMouseInfo mi) {
        setLastInfo(mi);
        dragOverDropZone(mi);
    
        static int trySkipCount = 0;
        updateVelocity();
        bool skipSnapping = mouseVelocity > 200;
        if (mouseVelocity > 800) trySkipCount = 100;
        trySkipCount = skipSnapping ? trySkipCount + 1 : 0;
        if (trySkipCount < 5) skipSnapping = false;
        skipSnapping = false;
    
        /* forgot targetFilter??? */
        
        if (currentSpace and selection and selection.main) {
            SnapperFilter filter = null;
    
            // Deny snapping with snappers on a non-active space volume.
            if (mi.in2D and useActiveSpaceVolume) filter = ActiveSpaceVolumeSnapperFilter();
    
            if (selection.skipTrySnap(mi, modifyEnv, filter)) return;
            beginRedrawCurrentSpace();
            
            // Dragging in 2D shouldn't always alter z positioning when dragging between multifloors.
            point mainPos = posFromLine(mi.currentLine, preferActiveSpaceVolumes=mi.in2D);
            orientation mainRot = mainOriginalTransform.rot();
    
            selection.main.setPos(mainPos);
            selection.main.setRot(mainRot);
            
            if (!denySnapping()) {
            Transform oldTranform = selection.main.toSpaceTransform();
    
            SnapInfo last = currentSpace ? currentSpace.lastSnapped : null;
            SnapInfo info = skipSnapping ? null : selection.trySnap(mi, modifyEnv, filter);

            /********* awesome modification *********/
            if(this.activeSnapInfo != info) {
                this.snapInfoChanged(info, mi);
            }
            this.activeSnapInfo = info;
            this.updateActiveGhost(info);
            /********* awesome modification *********/;
    
            if (skipSnapping) modifyEnv.restore(updateBsp=true);
    
            if (!last or !info or !last.eq(info)) {
                invalidate(selection.main);
    
                // should do invalidatePos -- does not work .. fix later
                for (s in selection.snaps) currentSpace.invalidatePos(s);
            }
            if (!info.possible) selection.main.setTransform(oldTranform);
            
            updateSnappers(info.ConnectSnapInfo ? info.ConnectSnapInfo.snap.snapper : null);
            if (!last or !info or !last.eq(info)) selection.main.alignAllSnappedDuringAnimation();
            } else {
            updateSnappers(null);
            }
            
            endRedrawCurrentSpace();
            mi.currentView.invalidateFocusPoint();
        }
    }

    
    
}