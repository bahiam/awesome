/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;
use cm.syntax;


public syntax str->Object aweConsumerContractItem {
    
    //method
    @returnType=type @name=id @args=formalArgList { 
        str->Object data();
        data.put("contractType", "method");
        data.put("returnType", returnType);
        data.put("name", name);
        data.put("args", args);
        return data;
    }

    //values
    @returnType=type @name=id {
        str->Object data();
        data.put("contractType", "prop");
        data.put("returnType", returnType);
        data.put("name", name);
        return data;
    }

}

public member @visibility Contract @source=id '{' @contractItems=[aweConsumerContractItem ';']*'}'  {
    
    SMembers proxyMembers(noSrcRef);


    for(item in contractItems) {
        proxyMembers << proxyMember(source, item);
    }
 
    return member {
        @visibility Object @source;
        @proxyMembers;
    };
}

public definition @visibility contract @name=id '{' @contractItems=[aweConsumerContractItem ';']*'}'  {
    
    SMembers proxyMembers(noSrcRef);
    SId source("source");

    for(item in contractItems) {
        proxyMembers << proxyMember(source, item);
    }
 
    definition {
        @visibility class @name {
            @visibility Object @source;
            @visibility constructor(Object @source) {
                this.@source = @source;
            }
            @proxyMembers;
        }
    };
}


public SMember proxyProp(SId source, SId propName, SType propType) {
    str propNameStr = propName.name;
    SExpr zero = propType.type().literal0();

    return member {
        extend public @propType @propName() {
            if(!@source) {
                return @zero;
            }

            //awe object has a generic getter
            if(@source as AweObject) {
                Object value = @source.get(@propNameStr);
                if(value) return value.@propType;
            } 
            
            if(Field field = @source.class.?field(@propNameStr)) {
                Object value = @source.get(field).@propType;
                if(value) return value.@propType;
            }

            //last try, a parameter-less getter method
            return dynamic_call(@source.@propName():@propType);
        }
    };
} 

public SMember proxyMethod(SId source, SId methodName, SType methodReturnType, SFormalArgList methodArgs) {
    str methodNameStr = methodName.name;
    SExpr zero = methodReturnType.type().literal0();

    SActualArgList actualArgs();

    for(i in 0..(methodArgs.count-1)) {
        SFormalArg arg = methodArgs[i];
        SActualArg actualArg(arg.id.name);
        actualArgs << actualArg;
    }

    if(SType("void").equal(methodReturnType)) {
        return member {
            extend public @methodReturnType @methodName(@methodArgs) {
                if(@source)  {
                    dynamic_call(@source.@methodName(@actualArgs));
                }
            }
        };
    } else {
        return member {
            extend public @methodReturnType @methodName(@methodArgs) {
                if(!@source) return @zero;
                return dynamic_call(@source.@methodName(@actualArgs):@methodReturnType);
            }
        };
    }
}

public SMember proxyMember(SId source, str->Object contractItem) {
    //props
    if(contractItem.get("contractType").str == "prop") {
        SId propName = contractItem.get("name").SId;
        str propNameStr = propName.name;
        SType propType = contractItem.get("returnType").SType;
        SExpr zero = propType.type().literal0();

        return proxyProp(source, propName, propType);
    }

    //methods
    else if(contractItem.get("contractType").str == "method") {
        SId methodName = contractItem.get("name").SId;
        SType methodReturnType = contractItem.get("returnType").SType;
        SFormalArgList methodArgs = contractItem.get("args").SFormalArgList;

        return proxyMethod(source, methodName, methodReturnType, methodArgs);
    }

    return null;
}

public aweObject MySource {
    props(
        double width = 52inch,
        double height = 48inch,
        AweObject child = null
    );

    public bool isAlive = true;

    public constructor() {
        pln("hello!");
    }

    extend public void sayHi() {
        pln("hi!");
    }

    extend public double plusOne(double x) {
        return x + 1;
    }

    extend public int numero() { return 3; }
}

public class MySourceConsumer {

    public Contract model {
        double width;
        double height;
        AweObject child;
        bool isAlive;
        int numero;
        void sayHi();
        double plusOne(double x);
    }
    
    public constructor(Object model) {
        this.model = model;
    }
}

public contract ISayHi {
    void sayHi();
}


{
    MySource s();
    MySourceConsumer c(s);
    pln(#c.width; #c.child);
    c.sayHi();
    pln(#c.plusOne(7); #c.isAlive; #c.numero);

    var x = new ISayHi(c);
    x.sayHi();
}
