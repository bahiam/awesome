/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use cm.syntax;

public class ToStrShell extends AweDynamicShell {
    public aweShellMethod str toStr(str extraInfo);
}

public class AweObject {
    public str->Object props();
    public str _galleryId;
    public str _label;

    public constructor() {
        this.init();
    }

    extend public void init() { 

    }

    public str toS() {
        return this._label ? this._label : super();
    }

    extend public void applyFrom(AweObject o) {
        for(k,v in o.props) {
            this.set(k, v.copy);
        }
    }

    extend public Object get(str propName) {
        return this.props.get(propName);
    }

    extend public void set(str propName, Object value) {
        Object oldValue = get(propName);
        this.props.put(propName, value);
        propChanged(propName, oldValue, value);
    }
            
    extend public void propChanged(str propName, Object oldValue, Object newValue) {
    }        

    extend public bool buildQuickProperties(QuickProperties props) {
        return props and props.properties.any();
    }

    extend public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        return false;
    }

    extend public void buildAnimationProperties(AnimationProperties props) {
    }

    extend public void animationPropertyChanged(str key, Object value) {
    }

    public AweProduct _product : stream=null, copy=null;

    extend public AweProduct getProduct() {
        if (!this._product) {
            this._product = this.createProduct();
        }

        return this._product;
    }

    extend public AweProduct createProduct() {
        return null;
    }

    extend public str toS(str format, rest: Object[] extraParams) {
        str->Object props();
        for(obj in extraParams, index=i) {
            props.put(i.toS, obj);
        }
        return toS(format, props);
    }

    extend public str toS(str format, str->Object extraParams=null) { 
        str->Object props = this.props.copy();
        if(extraParams) {
            for(k,v in extraParams) {
                props.put(k,v);
            }
        }

        if (!format or !props and !props.any) { return format; }

        str->str formattedData(); 
        bool capture = false;
        str token = "";
        for (s in format) { 

            if (s == '{') { 
                capture = true;
                continue;
            } 
            
            else if (s == '}') { 
                capture = false;

                Int precision;
                str extraParam;
                var originalToken = token;

                if ( extraParams and extraParams.get(token) != null ) {
                    props.set( token, this.toS( extraParams.get(token).str ));
                } 

                var toInches = false;
                if (token.indexOf(":") > -1) { 
                    var data = token.split(':');
                    token = data.v0;
                    toInches = (data.v1.toLower().indexOf("inch") > -1);
                    if (toInches) { 
                        var extraInfo = data.v1.split(':');
                        if (extraInfo.v1) { 
                            precision = extraInfo.v1.toInt;
                        }
                    } else { 
                        precision = data.v1.toInt;
                        if (!precision) { 
                            extraParam = data.v1.toS;
                        }
                    }
                }
                

                var target = props.get(token);
                if (target as Double) { 
                    formattedData.put( token, getNumberAsFormatted(target, precision, toInches=toInches ) );
                } else if (target as Distance) { 
                    formattedData.put( token, getNumberAsFormatted(target.v, precision, toInches=toInches ) );
                } else {
                    str value = ""; 
                    if (target) { 
                        var formattedValue = ToStrShell(target).toStr(extraParam);
                        if (formattedValue != null) { 
                            value = formattedValue;
                        } else { 
                            value = target.toS();
                        }
                    }
                    formattedData.put(token, value);
                }

                format = format.replaceAll("{" # originalToken # "}",  "{" # token # "}");
                token = "";
                continue;
            }

            if (capture) { 
                token #= s;
            }

        }

        for (k,v in formattedData) { 
            format = format.replaceAll("{" # k # "}", v);
        }

        return format;
    }

    extend private str getNumberAsFormatted( Double target, Int precision, bool toInches ) {
        if (target) {   
            var targetValue = target.v;
            if (toInches) {
                targetValue /= 1inch;
            }
            return (precision) ? targetValue.toS(precision.v) : targetValue.toS();
        } else { 
            return "";
        }
    }

    extend public Anonymous Anonymous() {
        return this.props;
    }

    extend public void validate(AweValidationIssues issues) {

    }

    /************** query ****************/

    extend public AweObject{} query(str query) {
        AweObjectQueryIndex index(this);
        return index.get(query);
    }

    extend public AweObject[] toAweObjectArray(Object propValue) {
        
        AweObject[] array();

        var iteratorBase = propValue.?class.?iterator.?instantiate();

        aweTryCast (iteratorBase as iterator to SeqIterator, SetIterator) {
            iterator.init(propValue);
            
            while (iterator.step()) {
                AweObject obj = iterator.get.AweObject;
                if(obj)
                    array << obj;
            }
        }
        else { 
            if (iteratorBase as MapIterator) { 
                iteratorBase.init(propValue);

                while (iteratorBase.step()) {
                    AweObject obj = iteratorBase.v.AweObject;
                    if(obj)
                        array << obj;
                } 
            }
        }

        return array.count > 0 ? array : null;
    }

    public AweObject parent: copy=reference;

    extend public AweObject{} children() {
        AweObject{} children();
        for(k,v in this.props) {
            if(v as AweObject) {
                children << v;
            } else {
                var array = this.toAweObjectArray(v);
                if(array) {
                    children += array;
                }
            }
        }
        for(c in children) {
            c.parent = this;
        }
        return children;
    }

    extend public AweObject{} descendants(AweObject{} visited = null) {
        if(!visited) {
            visited = new AweObject{}();
        }

        for(c in this.children) {
            if(c !in visited) {
                visited << c;
                visited += c.descendants(visited);
            }
        }

        return visited;
    }
}

public definition @visibility aweObject @name=id @parentClass=["extends" type]? '{'  @props=["props" formalArgList ';']? @members=[classMember]* '}' {
    if (!parentClass) {
        parentClass = new SType("AweObject");
    }

    SMembers gettersSetters(noSrcRef);
    SMembers onChange(noSrcRef);
    SStatements initProps();

    if (props) {
        for (i in 0..(props.count - 1)) {
            SFormalArg arg = props[i];
            SType propType = arg.typeSyntax;
            SId propName = arg.id;
            str propNameStr = propName.name;
            SExpr propInitialValue = arg.default();
            SId onChangeMethodName(propName#"Changed");
            SId getDomainMethodName(propName#"Domain");
            
            //3 signatures for change
            onChange << member {
                extend @visibility void @onChangeMethodName() { }
                extend @visibility void @onChangeMethodName(@propType newValue) { }
                extend @visibility void @onChangeMethodName(@propType oldValue, @propType newValue) { }
            };

            gettersSetters << member {
                extend @visibility @propType @propName() {
                    Object value = this.get(@propNameStr);
                    if(value) {
                        return value.@propType;
                    }
                    return @propInitialValue;
                }
                extend @visibility @propType @propName=(@propType newValue) {
                    @propType oldValue = this.@propName;
                    this.set(@propNameStr, newValue);
                    this.@onChangeMethodName();
                    this.@onChangeMethodName(newValue);
                    this.@onChangeMethodName(oldValue, newValue);
                    return newValue;
                }
            };

            initProps << statement {
                this.@propName = @propName;
            };
        }
    }
    
    SId baseClassName(name.name#"_BaseClass");

    SMembers membersBundle(noSrcRef);
    for(m in members) {
        membersBundle << m;
    }

    if(props) {
        definition {
            @visibility class @baseClassName extends @parentClass {
                @gettersSetters;
                @onChange;
            }
        };

        definition {
            @visibility class @name extends @baseClassName {
                public constructor(@props) {
                    super();
                    @initProps;
                }

                public void init() { 
                    @initProps;
                }

                @membersBundle;
            }
        };
    } else  {
        //pretty useless, huh?
        definition {
            @visibility class @name extends @parentClass {
                @membersBundle;
            }
        };
    }
    
}

public member @visibility aweObjectDomain @domains=formalArgList ';' {
    SMembers domainMembers(noSrcRef);
    SStatements buildQuickProperties();
    SStatements quickPropertiesChanged();

    SStatements buildAnimationProperties();
    SStatements animationPropertiesChanged();
    
    for (i in 0..(domains.count-1)) {
        SFormalArg arg = domains[i];
        SId propName = arg.id;
        str propNameStr = propName.name;
        SType propType = arg.typeSyntax;
        SId domainName(arg.id.name#"Domain");
        SExpr domainInitialValue = arg.default();
        SId labelName(arg.id.name#"Label");
        SId visibleName(arg.id.name#"Visible");

        domainMembers << member {
            @visibility SubSet @domainName = @domainInitialValue;
            @visibility str @labelName = @propNameStr.propNameToLabel();
            @visibility bool @visibleName = true;
        };

        //we use distance subsets for double properties, so we need this great if statement there:
        if (propType.type == distance) {
            buildQuickProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(@propNameStr, @labelName, distance(@propName), @domainName);
                        }
                    }
                }
            };

            buildAnimationProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            // props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append2(@propNameStr, @labelName, distance(@propName), @domainName, lockable=false);
                        }
                    }
                }
            };
        }
        else {
            buildQuickProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(@propNameStr, @labelName, @propName, @domainName);
                        }
                    }
                }
            };

            buildAnimationProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            // props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append2(@propNameStr, @labelName, @propName, @domainName, lockable=false);
                        }
                    }
                }
            };
        }
        
        quickPropertiesChanged << statement {
            if (key == @propNameStr) {
                this.@propName = value.@propType;
                return true;
            }
        };

        animationPropertiesChanged << statement {
            if (key == @propNameStr) {
                this.@propName = value.@propType;
            }
        };
    }

    return member {
        @domainMembers;
                
        @visibility bool buildQuickProperties(QuickProperties props) {
            super(..);
            @buildQuickProperties;
            return true;
        }

        @visibility bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
            if (key and !testChangeOnly) {
                @quickPropertiesChanged;
            }
            return super(..);
        }

        @visibility void buildAnimationProperties(AnimationProperties props) {
            super(..);
            @buildAnimationProperties;
        }

        @visibility void animationPropertyChanged(str key, Object value) {
            super(..);
            @animationPropertiesChanged;
        }
    };
}