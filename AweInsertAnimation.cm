/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;
use custom.awesome.connectors;

public class AweInsertAnimation extends InsertAnimation {
    public AweSnapper snapper;
    private str currentKey;

    public constructor(StartInsertAnimationEnv env) {
        super(env);

        this.snapper = env.selection.main.AweSnapper;

        assert(this.snapper);
    }

    public void buildProperties() {
        this.destroyAnimationProperties();
        this.createAnimationProperties();
        str[] sortOrder = null;

        if (this.snapper.activeConfigurator) {
            this.snapper.addExtraAnimationProperties(this.animationProperties);
            this.snapper.activeConfigurator.buildAnimationProperties(this.animationProperties);

            sortOrder = this.snapper.activeConfigurator.quickPropertySort();
            if ( sortOrder and sortOrder.count > 0 ) {
                for( qp in this.animationProperties.properties ) {
                    if ( sortOrder.indexOf( qp.key ) == -1 ) sortOrder << qp.key;
                }
            }
        }

        this.animationProperties.finalize(showList=sortOrder);
        
        if (this.animationProperties and this.currentKey) {
            this.animationProperties.setCurrent(this.currentKey);
        }
    }

    public void propertyChange(str key, Object value) {
        super(..);

        if (this.snapper.activeConfigurator) {
            this.snapper.activeConfigurator.animationPropertyChanged(..);
            this.snapper.extraAnimationPropertyChanged(..);
            this.snapper.refresh(true, true);
            this.updateSelectionSnaps();

            this.currentKey = key;

            this.buildProperties();
        }
    }

    //ghostly things
    public AweGhost activeGhost;
    extend public void updateActiveGhost(SnapInfo info) {
        AweGhost previousGhost = this.activeGhost;
        this.activeGhost = null;
        if(info as ConnectSnapInfo) {
            if(AweGhost ghost = info.snap.?getGhost()) {
                this.activeGhost = ghost;
            }
            if(AweGhost ghost = info.attach.?getGhost()) {
                this.activeGhost = ghost;
            }
        }
        if(this.activeGhost != previousGhost) {
            this.space.invalidate(this);
        }
    }

    public void drawGraphs(LayerBuffer lb) {
        if(this.activeGhost) {
            this.activeGhost.get2D().?draw(lb);
        }
    }

    public Primitive3D get3D(FetchEnv3D env) {
        if(this.activeGhost) {
            return this.activeGhost.get3D(env);
        }
        return null;
    }

    public Primitive3D toSpace(Primitive3D prim) {
        if(this.activeGhost and prim) {
            prim.setPosRot(this.activeGhost.ghostSnapper.pos, this.activeGhost.ghostSnapper.rot);
            prim = safeInstance3D([Primitive3D: prim]);
        }
        return prim;
    }

    public bool deny3D() {
        return false;
    }
    
    public PropObj end() {
        if(this.activeGhost) {
            var snapper = this.activeGhost.deploy();
            this.space.undoableInsert(snapper);
            modifyEnv << snapper;
            this.selection << snapper;
            this.toInsertInBsp << snapper;
            snapper.snapAllAligned();
            snapAllAligned(this.selection.main);
        }
        return super(..);
    }

    public bool snapAllAlignedAtEnd() {
        return this.activeGhost == null;
    }
    


     //Copied from InsertAnimation then modified. Modifications are tagged with comment **** awesome modification ***.
     public void move(AnimationMouseInfo mi) {
        super(mi);
        static int trySkipCount;
        updateVelocity();
        bool skipSnapping = mouseVelocity > 500;
        if (mouseVelocity > 800)  trySkipCount = 100;
        
        trySkipCount = skipSnapping ? trySkipCount + 1 : 0;
        if (trySkipCount < 5) skipSnapping = false;
        if (currentSpace and currentSpace.lastSnapped) {
            skipSnapping = false;
        }
        
        point mainPos = posFromLine(mi.currentLine, preferActiveSpaceVolumes=mi.in2D);
        assert(!mainPos.x.isInfinite);
    
        //double t0 = microTime;
        
        if (currentSpace) {
            SnapperFilter filter = targetFilter();
    
            /****************** awesome modification *******************/
            // // Deny snapping with snappers on a non-active space volume.
            // if (mi.in2D and useActiveSpaceVolume) filter = CombinedFilter(filter, ActiveSpaceVolumeSnapperFilter());
    
            // if (selection.skipTrySnap(mi, modifyEnv, filter)) {
            //     pln("skipou saporra");
            // return;
            // }
            /****************** awesome modification *******************/
            
            
            
            beginRedrawCurrentSpace();
            //currentSpace.initAnimateDraw(this);
            selection.main.setPos(mainPos);
            selection.main.setRot(mainOriginalTransform.rot());
            //pln(#mainOriginalTransform);
    
            //double t5;
            if (!denySnapping()) {
            Transform oldTranform = selection.main.toSpaceTransform();
    
            SnapInfo last = currentSpace ? currentSpace.lastSnapped : null;
            //double t1 = microTime;
            SnapInfo info = skipSnapping ? null : selection.trySnap(mi, modifyEnv, filter);
            
            /********* awesome modification *********/
            this.updateActiveGhost(info);
            /********* awesome modification *********/

            //SnapInfo info = skipSnapping ? null : trySnap(mi, modifyEnv, filter);
            if (skipSnapping) modifyEnv.restore(updateBsp=true);
            
            //double t2 = microTime;
            
            if (!last or !info or !last.eq(info)) invalidate(selection.main);
            
            //double t3 = microTime;
            if (!info.possible) selection.main.setTransform(oldTranform);
    
            //ptrace(" time to update - ", info ? info.snap.snapper : null);
            //updateSnappers();
            //pln(" here we go ! ", info);
            updateSnappers((info.ConnectSnapInfo and info.ConnectSnapInfo.snap)
                       ? info.ConnectSnapInfo.snap.snapper : null);
            
            //double t4 = microTime;
    
            if (!last or !info or !last.eq(info))
              selection.main.alignAllSnappedDuringAnimation();
            //double t5 = microTime;
            //ptrace((t1-t0)/1e3;(t2-t1)/1e3;(t3-t2)/1e3;(t4-t3)/1e3;(t5-t4)/1e3);
            }
            
            endRedrawCurrentSpace();
            //double t6 = microTime;
            //ptrace(" last step ", t6-t5);
            
            //currentSpace.animateDraw(this);
        }
        //pln(" move done");
    
        //double t1 = microTime;
        //ptrace((t1 - t0)/1e3);
    }
}