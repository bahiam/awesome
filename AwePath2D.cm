/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

public class AwePath2D extends EdgedPath {
    private line2D lastLine : public readable;

    public constructor (double x, double y) {
        this((x,y));
    }
    
    public constructor(point2D origin=(0, 0)) {
        super(origin);
    }

    public constructor(APath2D path2D) {
        super(path2D.startPoint);
        for(m in path2D.members) {
            if(m as APath2DLineTo) {
                this.lineTo(m.p);
            }
            else if(m as APath2DArcTo) {
                this.arcTo(m.p, m.startTangent);
            }
        }
    } 
    
    extend public AwePath2D to(point2D target) {
        this.lastLine = line2D(endPoint, target);
        lineTo(target);
        return this;
    }
    
    extend public AwePath2D go(point2D increment) {
        return to(endPoint + increment);
    }
    
    extend public AwePath2D go(double x, double y) {
        return go((x,y));
    }
    
    extend public AwePath2D up(double distance) {
        return go(0, distance);
    }

    extend public AwePath2D down(double distance) {
        return up(-distance);
    }
    
    extend public AwePath2D right(double distance) {
        return go(distance, 0);
    }
    
    extend public AwePath2D left(double distance) {
        return right(-distance);
    }

    extend public AwePath2D arcGo(point2D increment, angle startTangent) {
        arcTo(endPoint + increment, startTangent);
        return this;
    }

    extend public AwePath2D toStart() {
        if (!isClosed()) go(startPoint);
        return this;
    }

    public void close() {
        this.lastLine = line2D(endPoint, startPoint);
        super();
    }
    
    //makes extrusion between planes on z1 and z2
    extend public Primitive3D toPrimitive(double z1=0, double z2=0) {
        PolygonMesh3D mesh(this, z2 - z1);
        mesh.setDoubleSided(true);
        mesh.move((0,0,z1));
        return mesh;
    }

    

    /**************** path reduction for worksurface shape *********************/
    extend public APath2D reduced(double offset) {
        //the edged path class from the abstract package is more entertiwned that it probably should,
        //so the way I found to extract a reduced path is to set the defaultEdge to a PathEdge object that has the deduction property set on it, then call the method in edged path that returns the deducted path based on the default edge. Complex, right? 
        var edge = AwePathEdge(pathDeduction = offset);
        this.defaultEdge = edge;
        for(m in members) {
            setEdge(m, edge);
        }
        return this.deductedPath();
    }
}

public class AwePathEdge extends PathEdge {
    private double pathDeduction = 0;

    public constructor(double pathDeduction=0) {
        this.pathDeduction = pathDeduction;
    }

    public double pathDeduction() {
	    return this.pathDeduction;
    }
}

/*************** lines ***************/
//all lines in a path, anti-clockwise, good for connect lines (points outwards)
public line2D[] lines(APath2D this) {
    var path = this.isClockwise ? this.reversed() : this;
    line2D[] lines();
    var lastPoint = path.startPoint;
    for(m in members) {
        if(m as APath2DLineTo) {
            lines << line2D(lastPoint, m.p);
        }
        lastPoint = m.p;
    }
    return lines;
}

