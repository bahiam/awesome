/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;
use custom.awesome.connectors;

public class AweBindingSnapper extends AweSnapper : abstract {
    //the data root
    public AweObject root;

    //child classes need to init it
    extend public AweObject initRoot() : abstract { }

    public void deselected() {
        //necessary to get rid of the selection highlight
        super(..);
        this.activeConfigurator = null;
        this.invalidate();
    }

    //aweBinding syntax implements this method
    extend public void bindProducts(AweObject obj) {

    }
     
    public constructor() {
        this.root = this.initRoot();
        this.activeConfigurator = root;
        
        super(..);
    }

    public void refresh(bool updateConnectors=false, bool tryAlignAllSnapped=false) {
        this.flushCache();
        
        for (p in this.allProducts()) {
            p.refresh();
        }
        
        super(..);
    }

    public AweObject[] allModels() {
        AweObject[] list();
        
        this.addModels(list, this.root);
        
        return list;
    }

    extend public AweProduct getProductForModel(AweObject model) {
        return model.getProduct();
    }

    public AweProduct[] allProducts() {
        bindProducts(this.root);
        AweProduct[] list();

        for (m in this.allModels()) {
            if (AweProduct product = getProductForModel(m)) {
                list << product;
            }
        }

        return list;
    }

    extend private void addModels(AweObject[] list, AweObject parentModel) {
        if (parentModel) { 
            if (parentModel in list) return;

            list << parentModel;
            
            for (key, propValue in parentModel.props) {
                if (propValue == null) continue;
                
                if (propValue as AweObject) {
                    this.addModels(list, propValue);
                }
                else {
                    var iteratorBase = propValue.?class.?iterator.?instantiate();

                    aweTryCast (iteratorBase as iterator to SeqIterator, SetIterator) {
                        iterator.init(propValue);
                        
                        while (iterator.step()) {
                            AweObject obj = iterator.get.AweObject;
                            this.addModels(list, obj);
                        }
                    }
                    else { 
                        if (iteratorBase as MapIterator) { 
                            iteratorBase.init(propValue);

                            while (iteratorBase.step()) {
                                AweObject obj = iteratorBase.v.AweObject;
                                this.addModels(list, obj);
                            } 
                        }
                    }
                }
            }
        }
    }

    extend public Graph get2D() {
        AweGraph graph();
        var allP = this.allProducts();
        
        if (allP) {
            for (p in allP) { 
                if (Graph g = p.get2D()) { 
                    graph << g;
                }
            }
        }

        return graph;
    }

    public void drawGraphs(LayerBuffer lb, View view, GeometricFinder finder=null) {
        this.get2D().?draw(lb);
        super(..);
    }

    public Primitive3D get3D(FetchEnv3D env) {
        Awe3D all();

        for (m in allModels) {
            if (AweProduct product = getProductForModel(m)) {
                var prim = product.get3D(env);

                AweBindingSnapperPickSurface pick(this, prim, m.class.name);
                
                pick.configurator = m;
                prim.setOwner(pick);
                
                //selection highlight
                if (m != root and this.activeConfigurator == m and env.reason != fetchReason3D.render) {
                    prim = prim.outlinedPrim();
                }

                all << prim;
            }
        }
        
        return all;
    }   

    extend private void flushCache() {
        this._localBound = null;
    }

    private Box _localBound;

    public box localBound() {    
        if (this._localBound) return this._localBound.v;

        box b;

        for (p in allProducts) {
            if (p) {
                b += p.localBound;
            }
        }

        this._localBound = b;
        
        return b;
    }

    /**
     * Return desired click animation. 
     */
    public Animation clickAnimation(StartClickAnimationEnv env) {
        if (space and this in env.snappers) {
            return new AweBindingSnapperPickSurfaceClickAnimation(env, this);
        }

        return super(..);
    }

    public Object loaded0(ObjectFormatter formatter, LoadFailInfo failInfo) {
        this.appendSelfToModels();
        
        return super(..);
    }

    /***********************************************************************
     * Material change
     ***********************************************************************/

     public AweMaterialManager materialManager(this);

    /**
     * Return true if material change is supported.
     */
    public bool supportsMaterialChange() {
        return true;
    }
           
    /**
        * Set material with key. The material 'key' must be registered through 'registerMaterial()'.
        */
    public void setUserMaterial(str key, Material m) {
        var materialPropName = key.split('#').v0;
        for(model in allModels()){
            var potential = model.get(materialPropName);
            if(potential as AweMaterialShell) {
                if(potential.isOwnerOfPickSurface(key)) {
                    potential.setMaterial(m);
                    model.invalidate();
                    return;
                }
            }
        }
    }

    public str systemUserMaterialIdToLabel(str id) {
        var propName = id.split('#').v0;
        return propNameToLabel(propName);
    }

    extend private UserMaterials userMaterials() {
        return materialManager.?userMaterials;
    }
    
        
    /**
        * Return registered user materials.
        */
    public UserMaterials getUserMaterials() {
        return this.userMaterials();
    }
}

public class AweBindingSnapperPickSurface extends PickSurface {
    public AweObject configurator;
    public str propKey;
}
