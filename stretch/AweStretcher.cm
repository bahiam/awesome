/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.stretch;

public class AweStretcher {
    public line line;
    public AweObject model;
    public str propKey;

    public AweStretcherConnector stretcherA;
    public AweStretcherConnector stretcherB;

    private bool enableA;
    private bool enableB;

    public constructor(line line, AweObject model, str propKey, bool enableA=true, bool enableB=true, point visiblePosOffsetA=point(), point visiblePosOffsetB=point()) {
        this.line = line;
        this.model = model;
        this.propKey = propKey;

        this.stretcherA = new AweStretcherConnector(this.snapper(), this, visiblePosOffsetA);
        this.stretcherB = new AweStretcherConnector(this.snapper(), this, visiblePosOffsetB);

        this.enableA = enableA;
        this.enableB = enableB;
    }   

    extend public SubSet domain() {
        return this.model.getDomain(this.propKey);
    }

    extend public AweSnapper snapper() {
        return this.model.mainSnapper.AweSnapper;
    }

    //Use this to decided who to propagate to. Opportunity to make animation props like the height of Fika panels?
    extend public Snapper{} propagateToSnappers(AweStretcherPropagationType propagation) {
        if (propagation == AweStretcherPropagationType.directlyConnected) {
            return this.snapper.connectedNeighbors();
        }

        if (propagation == AweStretcherPropagationType.allConnected) {
            return this.snapper.allConnected();
        }
        
        return null;
    }

    extend public AweStretcherConnector{} alignedStretcherConnectors(Connector ref, AweStretcherPropagationType propagation) {
        AweStretcherConnector{} aligned();
        var group = this.propagateToSnappers(propagation);

        if (group and group.any()) {
            var spaceLine = this.snapper().toSpace(this.line);

            for (snapper in group) {
                for (AweStretcherConnector c in snapper.connectors()) if (c != ref) {
                    if (c.spaceRot() == ref.spaceRot() and spaceLine.normalIntersectUnbounded(c.spacePos()).ip == ref.spacePos()) {
                        aligned << c;
                    }
                }
            }
        }

        return aligned;
    }

    extend public Connector{} connectors() {
        this.stretcherA.setPos(this.line.p0);
        this.stretcherA.setRot(new orientation(this.line.p0 - this.line.midPoint));
        this.stretcherB.setPos(this.line.p1);
        this.stretcherB.setRot(new orientation(this.line.p1 - this.line.midPoint));

        Connector{} result();

        if (this.enableA) result << this.stretcherA;
        if (this.enableB) result << this.stretcherB;

        return result;
    }

    extend public void addToConnectors(ConnectorCollection collection) {
        for (c in this.connectors()) {
            collection << c;
        }
    }

    extend public double lenghInDomain(double length) {
        var domain = this.domain();
        if(!domain) return length;
        return domain.closest(length).safeDouble();
    }

    extend private point getAnchor(AweStretcherConnector connector) {
        if (connector == this.stretcherA) {
            return this.stretcherB.spacePos();
        }
        
        if (connector == this.stretcherB) {
            return this.stretcherA.spacePos();
        }

        return point();
    }

    extend private void updateStretchLine(AweStretcherConnector connector, line& spaceLine, point spacePos) {
        if (connector == this.stretcherA) {
            spaceLine.p0 += spacePos - spaceLine.p0;
        }
        else if (connector == this.stretcherB) {
            spaceLine.p1 += spacePos - spaceLine.p1;
        }
    }

    extend public bool update(Connector s, point p, AweStretcherPropagationType propagation) {
        bool changed = false;

        if (s as AweStretcherConnector) {
            var spaceLine = this.snapper.toSpace(this.line);
            var spacePos = this.snapper.toSpace(p);

            var anchor = this.getAnchor(s);

            this.updateStretchLine(s, spaceLine, spacePos);
            
            var currentValue = this.model.get(this.propKey).safeDouble();
            var newValue = this.lenghInDomain(spaceLine.length);

            if (currentValue != newValue) {
                if (propagation != AweStretcherPropagationType.none) {
                    for (c in this.alignedStretcherConnectors(s, propagation)) {
                        point pos = c.stretcher.line.normalIntersectUnbounded(c.snapper.toSnapper(spacePos)).ip;
                        
                        c.stretcher.?update(c, pos, propagation=AweStretcherPropagationType.none);
                    }
                }

                this.model.set(this.propKey, newValue);
                this.model.invalidate();
                this.snapper.updateConnectors();

                var after = this.getAnchor(s);
                
                this.snapper.move(anchor - after);
                this.snapper.snapAllAligned();
                this.snapper.space.invalidate(this.snapper);
                this.snapper.snapAllAligned();

                changed  = true;

                if (animation as AweStretcherAnimation) {
                    animation.updateProperties();
                }
            }
        }

        return changed;
    }

    extend public bool isVertical() {
        return this.line.p0.z != this.line.p1.z;
    }

    extend private Primitive3D getText3D() {
        var dimension = this.model.props.get(this.propKey).safeDouble();

        Text3D text(coreDistanceToS(dimension.distance), 4inch.float, 0.5inch.float, "Arial");
        var textBound = text.localBound();

        text.move(-textBound.center);

        var orient = this.getText3DCameraOrientation(this.snapper.bound().center, this.snapper.rot.yaw);
        var offset = this.isVertical() ? point() : (0, 0, 2.5inch);

        var centeredText = new Instance3D(text);

        centeredText.setPosRot(this.line.midPoint() + offset, orient);

        return centeredText;
    }

    extend private Primitive3D getArrow3D(double halfLength) {
        Awe3D result();
        
        var headSize = 4inch;
        
        point baseEnd = (halfLength - headSize, 0, 0);
        point baseStart = (headSize, 0, 0);
        point headEnd = (halfLength, 0, 0);
        double headRadius = headSize / 3;
        double cylinderRadius = headSize / 8;
        
        ClosedCylinder3D base(baseStart, baseEnd, cylinderRadius, doubleSided=true);
        ClosedCone3D head(baseStart, point(), headRadius, 0, doubleSided=true);
    
        var leftArrow = safeInstance3D([Primitive3D: base, head]);

        leftArrow.move((0, 0, headRadius));

        var rightArrow = leftArrow.copy();

        result << leftArrow.setPosRot(stretchArrowPos(this.stretcherA), stretchArrowRot(this.stretcherA));
        result << rightArrow.setPosRot(stretchArrowPos(this.stretcherB), stretchArrowRot(this.stretcherB));

        return result;
    }

    extend public Primitive3D get3D(FetchEnv3D env) {
        Awe3D result();

        var text = this.getText3D();

        result << text;

        var arrowLength = this.line.length / 2 - text.localBound().w / 2;
        var arrow = this.getArrow3D(arrowLength);

        result << arrow;

        if (this.isVertical()) {
            var backArrow = arrow.copy();
            var backText = text.copy();

            var y = this.snapper.localBound.p0.y;
            var offset = 3inch;
            
            arrow.move((0, y - offset, 0));
            backArrow.move((0, y + offset, 0));

            text.move((0, y - offset, 0));
            backText.move((0, y + offset, 0));

            result << backArrow << backText;
        }

        result.setMaterial(this.getDimensionMaterial());

        return result;
    }

    extend public point stretchArrowPos(Connector connector) {
        var z = this.line.p0.z;
        
        if (this.isVertical() and connector == this.stretcherB) {
            z = this.line.p1.z;
        }
        
        return (connector.pos.point2D, z);
    }
    
    extend public orientation stretchArrowRot(Connector connector) {
        if (this.isVertical()) {
            var pitch = connector == this.stretcherA ? 270deg : 90deg;

            return orientation(0deg, pitch, 0deg);
        }
        
        return orientation(connector.rot.yaw + 180deg);
    }

    extend private orientation getText3DCameraOrientation(point refPoint, angle yaw) {
        AngleEnum validViewAngles([0deg, 90deg, 180deg, 270deg]);
    
        if (View3D v3D = activeView3D()) {
            line camLine(refPoint, v3D.camera.location);
        
            orientation orient(camLine.direction());
        
            orient.yaw += 90deg - yaw;
            orient.yaw = validViewAngles.closest(orient.yaw).Angle.v;
            
            var roll = this.isVertical() ? 0deg : -90deg;

            return orientation(orient.yaw, 0deg, roll);
        }
    
        return orientation();
    }

    extend public Graph get2D() {
        GInstance result();
        
        var refLine = this.line.line2D;
        var color = plainBlueMaterial3D.getAverageColor();
        
        GArrow arrow(refLine, color, headSize=0.15, twoway=true, relative=false, filled=true);
        
        arrow.lineType.style = lineStyle.thick;

        result << arrow.move(0, 0, 3);

        var dimension = this.model.props.get(this.propKey).safeDouble();

        GText text(refLine.midPoint(), coreDistanceToS(dimension.distance), h=0.2, align=middle, textColor=color, alwaysReadable=true);
        
        result << text.move(0, 0, 5);
        result << new GRect(text.bound, lineType=noLineType, fillColor=white).move(0, 0, 4);

        return result;
    }

    extend private Material3D getDimensionMaterial() {
        return plainBlueMaterial3D;
    }
}

public AweStretcher createStretcher(AweObject model, str propKey, line line, bool enableA=true, bool enableB=true, point visiblePosOffsetA=point(), point visiblePosOffsetB=point()) {
    if (propKey in model.props) {
        var domain = model.getDomain(propKey);

        if (!domain or domain.count <= 1) return null;

        if (!model._stretchers) {
            init model._stretchers();
        }
        
        var stretcher = model._stretchers.get(propKey);

        if (!stretcher) {
            stretcher = new AweStretcher(line, model, propKey, enableA, enableB, visiblePosOffsetA, visiblePosOffsetB);

            model._stretchers.put(propKey, stretcher);
        }

        stretcher.line = line;

        return stretcher;
    }

    return null;
}