/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.electrical;

public class AweOptimizedLineNetwork { 

    private AweLineNavigator navigator;

    public constructor(line[] lines) { 
        this.navigator = new AweLineNavigator(lines);
    }

    extend public point[] shortestRoute( point start, point end ) {
        var found = this.navigator.copy().search(..);
        
        if ( found ) {
            point[] result();

            AwePathNode node = found;
            result << node.end;

            while( node.parentNode != null ) {
                result << node.start;
                node = node.parentNode;
            }

            result << node.start;
            result.reverse();

            return result;
        }

        return null;
    }
}

private class AweLineNavigator { 

    private str->AwePathNode[] lines() : public readable;

    public constructor(line[] lines) { 
        for (l in lines) { 
            this.add(l);
        }
    }

    extend public AwePathNode[] getLinesWithStart( point start ) {
        return this.lines.get(this.getKeyFor(start));
    }

    extend public AwePathNode search( point start, point end ) {
        this.calculateHFor( end ); // calculate the H for all points to 'end'
        
        AwePathNode[] open = this.getLinesWithStart( start );
        AwePathNode[] closed();

        for( n in open ) {
            n.setParentNode( null );
        }

        while( open.count > 0 ) {
            // find cheapest node in open
            AwePathNode next = open.first;
            for( n in open ) {
                if ( n.f < next.f ) next = n;
            }

            // remove from open, and add to closed
            // open.exclude( next );
            open.remove( open.indexOf( next ) );
            closed << next;

            // if this node ends at end, we're done!
            if ( next.end == end ) return next;

            // add all the guys that have this as a start
            AwePathNode[] toAdd = this.getLinesWithStart( next.end );
            // remove anything that's in closed
            for ( n in toAdd ) {
                if ( closed.contains(n) ) {
                    continue;
                } else {
                    n.setParentNode( next );
                    open << n;
                }
            }
        }

        // sorry charlie
        return null;
    }

    extend public void calculateHFor(point end) { 
        for (k,v in this.lines) { 
            for (n in v) { 
                n.initialize(end);
            }
        }
    }

    final private void add(line l) { 
        this.checkAndAdd(l);
        this.checkAndAdd(line(l.p1, l.p0), true);
    }

    final private void checkAndAdd(line l, bool reverse=false) {
        var k = this.getKeyFor(l.p0);
        if (k !in this.lines) { 
            AwePathNode[] nodes();
            this.lines.put(k, nodes);
        }
        this.lines.get(k) << AwePathNode(l.p0, l.p1, reverse);
    }

    final private str getKeyFor(point p) { 
        return p.x # "_" # p.y # "_" # p.z;
    }
}

private class AwePathNode {
    
    public point root;
    public point end;
    public double g;
    public double h;
    private AwePathNode parentNode;
    private bool reverse;

    extend public point start() {
        return reverse ? this.end : this.root;
    }

    public constructor( point start, point end, bool reverse = false ) {
        this.root = start;
        this.end = end;
        this.reverse = true;
    }

    extend public AwePathNode initialize(point target) { 
        this.h = getCost(this.start, target);
        this.g = 0;
        return this;
    }

    extend public double f() {
        return this.g + this.h;
    }

    extend public AwePathNode setParentNode(AwePathNode parent) {
        this.parentNode = parent;

        if ( this.parentNode ) {
            // this.g = this.parentNode.g + this.getCost(this.start, this.parentNode.start);
            this.g = this.getCost(this.start, this.parentNode.start) + this.parentNode.g;
        } else {
            this.g = this.getCost(this.start, this.end); // if it has no parent, then the cost is just itself
        }
        return this;
    }

    extend public double getCost(point base, point target) {
        return base.distance(target);
    }

    public str toS() {
        line l( start, end );
        return l # " - " # l.length # " - " # (l.p0.z == l.p1.z);
    }
}