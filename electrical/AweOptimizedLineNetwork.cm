/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.electrical;

public class WeightedLine {
    public line line;
    public double weight;

    public constructor( line line, double weight = 1.0 ) {
        this.line = line;
        this.weight = weight;
    }
}

public class AweOptimizedLineNetwork { 

    private AweGraphPath graph();

    public constructor(line[] lines) { 
        for (l in lines) { 
            this.graph.addEdge( l, 1.0 ); // use constant weight
        }
    }

    public constructor(WeightedLine[] lines) { 
        for (l in lines) { 
            this.graph.addEdge( l.line, l.weight );
        }
    }

    extend public point[] shortestRoute( point start, point end ) {
        var found = search(..);

        if ( found ) return found.reversePath();
        return null;
    }

    extend private AwePathNode search( point start, point end ) {
        AwePathNode[] open();
        open << AwePathNode( null, this.graph.getVertex( start ), null, end );
        AweGraphVertex[] closed();

        while( open.count > 0 ) {
            // find cheapest node in open
            AwePathNode next = open.first;
            for( n in open ) {
                if ( n.f < next.f ) next = n;
            }

            // remove from open, and add to closed
            open.remove( open.indexOf( next ) );
            closed << next.vertex;

            // if this node ends at end, we're done!
            if ( next.point == end ) return next;

            // add all the guys that have this as a start
            AweGraphEdge[] toAdd = next.vertex.neighbors();
            // remove anything that's in closed
            for ( e in toAdd ) {
                AweGraphVertex n = e.neighbor(next.vertex);
                if ( closed.contains(n) ) {
                    continue;
                } else {
                    open << AwePathNode( next, n, e, end );
                }
            }
        }

        // sorry charlie
        return null;
    }
}

private class AweGraphPath {
    public str->AweGraphVertex vertices();

    public constructor() { }

    extend public AweGraphVertex getVertex( point p ) {
        return this.vertices.get( p.toS );
    }

    extend public AweGraphVertex addVertex( point p ) {
        AweGraphVertex vertex = getVertex( p );
        if ( !vertex ) {
            vertex = AweGraphVertex(p);
            vertices.put( p.toS, vertex );
        }
        return vertex;
    }

    extend public void addEdge( line l, double weight ) {
        AweGraphVertex p0 = this.addVertex( l.p0 );
        AweGraphVertex p1 = this.addVertex( l.p1 );

        bool newEdge = true;
        for( edge in p0.edges ) {
            if ( edge.neighbor( p0 ) == p1 ) {
                newEdge = false;
                break;
            }
        }
        if ( newEdge ) {
            AweGraphEdge edge( p0, p1, weight );
            p0.edges << edge;
            p1.edges << edge;
        }
    }
}

private class AweGraphVertex {
    public point point;
    public AweGraphEdge[] edges();

    public constructor( point p ) {
        this.point = p;
    }

    extend public AweGraphEdge[] neighbors() {
        return edges;
    }
}

private class AweGraphEdge {
    public AweGraphVertex vertex1;
    public AweGraphVertex vertex2;
    public double weight;

    public constructor( AweGraphVertex v1, AweGraphVertex v2, double w ) {
        vertex1 = v1;
        vertex2 = v2;
        weight = w;
    }

    extend public double cost() {
        return vertex1.point.distance(vertex2.point) * weight;
    }

    extend public AweGraphVertex neighbor( AweGraphVertex me ) {
        if ( vertex1 == me ) return vertex2;
        if ( vertex2 == me ) return vertex1;
        return null;
    }
} 

private class AwePathNode {
    public AweGraphVertex vertex;
    public AweGraphEdge edge;
    public double g = 0;
    public double h = 0;
    private AwePathNode parent;

    public constructor( AwePathNode parent, AweGraphVertex p, AweGraphEdge e, point hTarget ) {
        this.vertex = p;
        this.edge = e;
        this.h = getCost( hTarget );
        this.parent = parent;

        // if it has a parent node, it has a cost
        if ( this.parent ) {
            this.g = this.edge.cost() + this.parent.g;
        } 
    }

    extend public point point() {
        return vertex.point;
    }

    extend public double f() {
        return this.g + this.h;
    }

    extend public double getCost( point target) {
        return this.point.distance(target);
    }

    extend public point[] reversePath() {
        point[] result();
        AwePathNode node = this;

        while( node.parent != null ) {
            result << node.point;
            node = node.parent;
        }
        result << node.point;
        result.reverse();
        return result;
    }
}