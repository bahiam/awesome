/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.electrical;

public class AweElectricalClusterInfo {
    
    private AweElectricalMap map;
    public bool forRouting = false;

    public AweElectricalCluster[] clusters();
    private str->AweElectricalCluster pointsToClusters();
    
    //no infeed
    public AweElectricalCableLine[] orphanCables();

    private double lineThickness = 0.3inch;

    public constructor(AweElectricalMap map, bool forRouting=false) {
        this.map = map;
        this.forRouting = forRouting;
        updateStatus();
    }   

    extend public void updateStatus() {
        identifyClusters(map);
        makeTree();
    }

    extend private void makeTree() {
        for(cluster in clusters) { 
            //faulty state
            if(cluster.infeeds.count != 1) return;

            var infeed = cluster.infeeds.first();
            infeed.resetStreamInfo();

            var cableIndex = PointToElectricalComponentArrayIndex();

            var allCables = new AweElectricalComponent[]();
            for(c in infeed.cables) allCables << c;
            for(c in cluster.cables) allCables << c;

            for(c in allCables) {
                addComponentToIndex(c, cableIndex);
            }
            goDownstream(infeed, infeed.spacePoint.v, cableIndex);
        }
    }

    extend private void addComponentToIndex(AweElectricalComponent component, PointToElectricalComponentArrayIndex index) {
        
        //reset any stream info
        component.resetStreamInfo();

        for(v in component.vertices) {
            var current = index.get(v);
            if(!current) current = new AweElectricalComponent[]();
            current << component;
            index.put(v, current);
        }
    }

    extend private void goDownstream(AweElectricalComponent upstream, point joint, PointToElectricalComponentArrayIndex index) {
       
        var componentsAtJoint = index.get(joint);

        for(component in componentsAtJoint) {
            
            //found self, get out
            if(component == upstream) continue;

            component.upstream = upstream;

            if(upstream) {
                upstream.downstream << component;
            }

            for(vertice in component.vertices) {
                if(vertice == joint) continue;

                if(component as AweElectricalCableLine) {
                    component.flow = line(joint, vertice);
                }

                goDownstream(component, vertice, index);                
            }
        }
    }

    extend public Primitive3D get3D() {
        Awe3D all3D();

        for(cluster in clusters) {
            Awe3D infeed3D();
            Awe3D cluster3D();
            for(cable in cluster.cables) {
                if(!cable.upstream) {
                    var cableLine = cable.spaceLine.v;
                    Cylinder3D l(cableLine.p0, cableLine.p1, this.lineThickness);
                    cluster3D << l;

                } else {
                    var cableLine = cable.flow;
                    cluster3D << getPoweredCable3D(cableLine);
                }
            }
            for(infeed in cluster.infeeds) {
                infeed3D << infeedGeometry(infeed);
            }
            cluster3D.setMaterial(cluster.infeeds.count != 1 ? plainRedMaterial3D : plainGreenMaterial3D);
            infeed3D.setMaterial(cluster.infeeds.count != 1 ? plainRedMaterial3D : plainGreenMaterial3D);
            
            all3D << cluster3D;
            all3D << infeed3D;
        }

        for(cable in orphanCables) {
            var cableLine = cable.spaceLine.v;
            Cylinder3D l(cableLine.p0, cableLine.p1, .5inch);
            l.setMaterial(plainRedMaterial3D);
            all3D << l;
        }
        
        return all3D;
    }

    extend private Primitive3D getPoweredCable3D(line flowline){
        Awe3D prims();

        if (flowline.length > 5inch) {
            Arrow3D arrow(flowline.p0, flowline.p1, 0.7inch, this.lineThickness, 1.5inch);
            prims << arrow;
        }
        else {
            Cylinder3D l(flowline.p0, flowline.p1, this.lineThickness);
            prims << l;
        }

        return prims;
    }

    extend public AweElectricalCluster clusterAt(point p) {
        return pointsToClusters.get(p.toS);
    }

    private str missingInfeedMessage = "Missing infeeds for power.";

    extend public void validate(InvalidList invalidList) {
        Snapper{} orphanCableSnappers();
        for(c in orphanCables) {
            if(c.snapper) {
                orphanCableSnappers << c.snapper;
            }
        }
        if(orphanCableSnappers.count > 0) {
            invalidList.putWarning("awe electrical orphan cable", missingInfeedMessage, orphanCableSnappers);
        }

        for(cluster in clusters) {
            validateCluster(cluster, invalidList);
        }
    }

    extend public void validateCluster(AweElectricalCluster cluster, InvalidList invalidList) {
        Snapper{} clusterSnappers();
        for(c in cluster.cables) {
            if(c.snapper) {
                clusterSnappers << c.snapper;
            }
        }
        for(i in cluster.infeeds) {
            if(i.snapper) {
                clusterSnappers << i.snapper;
            }
        }
        if(cluster.infeeds.count == 0) {
            invalidList.putWarning("no infeed in electrical cluster", missingInfeedMessage, clusterSnappers);
        } else if(cluster.infeeds.count > 1) {
            invalidList.putError("multiple infeeds in eletrical cluster", "More than one power infeed in the same electrical application.", clusterSnappers);
        }
    }

    extend private void identifyClusters(AweElectricalMap map) {
        AweElectricalInfeedPoint[] infeeds();
        AweElectricalCableLine[] cables();
        if(!forRouting) {
            for(i in map.allInfeeds) {
                if(i.active) infeeds << i;
            }
            for(c in map.allCables) {
                if(c.active) cables << c;
            }
        }
        else {
            infeeds = map.allInfeeds;
            cables = map.allCables;
        }

        clusters.clear();
        pointsToClusters.clear();
        orphanCables.clear();
        point[] visitedPoints();

        var index = indexPointsToLines(cables);

        for(infeed in infeeds) {
            identifyAndAddInfeedCluster(clusters, infeed, visitedPoints, index);
        }

        //loose cables out there, no infeed
        for(cable in map.allCables) {
            if((cable.active or forRouting) and !pointsToClusters.get(cable.spaceLine.v.p0.toS) and !pointsToClusters.get(cable.spaceLine.v.p1.toS)) {
                orphanCables << cable;
            }
        }
    }

    extend private void identifyAndAddInfeedCluster(AweElectricalCluster[] clusters, AweElectricalInfeedPoint infeed, point[] visitedPoints, PointToElectricalCableArrayIndex pointLineIndex) {
        point p = infeed.spacePoint.v;

        //aready in someone else's cluster?
        var someoneElsesCluster = pointsToClusters.get(p.toS);
        if(someoneElsesCluster) {
            someoneElsesCluster.infeeds << infeed;
            return;
        }
        
        var cables = identifyCluster(p, visitedPoints, pointLineIndex);

        //exclude infeed cables if cluster will be used for routing
        if(forRouting) {
            AweElectricalCableLine[] routingCables();
            for(c in cables) {
                if (!c.infeedCable) {
                    routingCables << c;
                }
            }
            cables = routingCables;
        }
        AweElectricalCluster cluster();
        cluster.cables = cables;
        cluster.infeeds << infeed;

        for(c in cables) {
            pointsToClusters.put(c.spaceLine.v.p0.toS, cluster);
            pointsToClusters.put(c.spaceLine.v.p1.toS, cluster);
        }

        clusters << cluster;

    }

    extend private AweElectricalCableLine[] identifyCluster(point p, point[] visitedPoints, PointToElectricalCableArrayIndex pointLineIndex, AweElectricalCableLine[] visitedLines=new AweElectricalCableLine[]()) {

        var lines = pointLineIndex.get(p);
        for(l in lines) {
            if(l !in visitedLines) {
                visitedLines << l;
                identifyCluster(l.spaceLine.v.p0, visitedPoints, pointLineIndex, visitedLines);
                identifyCluster(l.spaceLine.v.p1, visitedPoints, pointLineIndex, visitedLines);
            }
        }
        if(p !in visitedPoints) {
            visitedPoints << p;
        }
        return visitedLines;
    }

    extend private PointToElectricalCableArrayIndex indexPointsToLines(AweElectricalCableLine[] cables) {

        PointToElectricalCableArrayIndex pointLineIndex();

        for(cable in cables) {
            point p0 = cable.spaceLine.v.p0;
            if(!pointLineIndex.get(p0)) {
                pointLineIndex.put(p0, new AweElectricalCableLine[]());
            }
            pointLineIndex.get(p0) << cable;

            point p1 = cable.spaceLine.v.p1;
            if(!pointLineIndex.get(p1)) {
                pointLineIndex.put(p1, new AweElectricalCableLine[]());
            }
            pointLineIndex.get(p1) << cable;
        }

        return pointLineIndex;
    }
}

public Primitive3D infeedGeometry(AweElectricalInfeedPoint infeed) {
    point tip = infeed.spacePoint.v;
    point origin = tip - point(infeed.spaceOrientation, 3inch);

    Arrow3D arrow(origin, tip, 1.5inch, 0.75inch, 1.5inch);
    
    return arrow;
}

public alias AweElectricalCableArray = AweElectricalCableLine[];
public alias AweElectricalComponentArray = AweElectricalComponent[];
public awePointIndex PointToElectricalCableArrayIndex for AweElectricalCableArray { }
public awePointIndex PointToElectricalComponentArrayIndex for AweElectricalComponentArray { }

{
    animate(new cm.abstract.robotics.RobotLimbInsertAnimation(StartInsertAnimationEnv(activeSpace, Snapper())));
}