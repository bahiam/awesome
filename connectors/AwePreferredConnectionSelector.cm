/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.connectors;

public class AwePreferredConnectionSelector {
    public AwePreferredConnection[] options;
    public AwePreferredConnection selected;
    public Snapper lastSnapper : copy=null, stream=null;

    private str previousAnimationSelection;

    public constructor(str previousAnimationSelection=null) {
        this.previousAnimationSelection = previousAnimationSelection;
    }   

    extend public Graph get2D() {
        return this.selected.?get2D();
    }

    extend public void updateOptions(Connector[] connectors, Snapper mainSnapper) {
        this.lastSnapper = mainSnapper;
        var options = new AwePreferredConnection[]();

        str->AwePreferredConnection map();
        str{} visited();

        for (AweConnectLine c in connectors) {
            AweConnectEnv env(c);

            if (env.model.?isPreferrableConnector(c)) {
                var p0 = c.spaceLine.p0;
                var p1 = c.spaceLine.p1;

                var key = this.getMapKey(p0, p1, c.overrideGroupKey);
                var keyReversed = this.getMapKey(p1, p0, c.overrideGroupKey);

                if (key !in visited) {
                    visited << key << keyReversed;
                    
                    var option = new AwePreferredConnection(p0, p1, c);
                    
                    options << option;
                    
                    map.put(key, option);
                    map.put(keyReversed, option);
                }
                else {
                    var option = map.get(key);

                    option.groupConnectors << c;
                }
                
                if (c.overrideGroupKey) {
                    c.friendlyName = c.overrideGroupKey;
                }
                
                if (c.friendlyName) {
                    this.setMapFriendlyName(map, key, c.friendlyName);
                    this.setMapFriendlyName(map, keyReversed, c.friendlyName);
                }
            }
        }

        this.options = options;

        this.sortOptionList();

        if (this.options.count() > 0) {
            if (this.previousAnimationSelection) {
                for (option in this.options) {
                    if (option.id == this.previousAnimationSelection) {
                        this.selected = option;
                        break;
                    }
                }

                this.previousAnimationSelection = null;
            }

            if (!this.selected) {
                this.selected = options.first();
            }
        }
    }

    extend private str getMapKey(point p0, point p1, str overrideGroupKey) {
        if (overrideGroupKey) {
            return overrideGroupKey;
        }

        return cleanApproximatelyZero(p1.point2D).toS() # cleanApproximatelyZero(p0.point2D).toS();
    }

    extend private void setMapFriendlyName(str->AwePreferredConnection map, str key, str friendlyName) {
        if (key in map) {
            map.get(key).friendlyName = friendlyName;
        }
    }

    extend private point2D cleanApproximatelyZero(point2D p) {
        // ~0 breaks things
        if(p.x == 0) p.x = 0;
        if(p.y == 0) p.y = 0;
        return p;
    }

    extend public bool preferred(Connector c) {
        return this.selected.?preferred(c);
    }

    extend public void sortOptionList() {
        point2D center = (0,0);
        if(lastSnapper) {
            center = lastSnapper.localBound().rect.center;
        }
        this.options.sort(function sortAntiClockwise, new Point2D(center));
        for(item in this.options, index=i) {
            item.id = (i+1).toS;
        }
    }
}

public class AwePreferredConnection {
    public constructor() {
    }

    public constructor(point p0, point p1, AweConnectLine referenceConnector) {
        this.p0 = p0;
        this.p1 = p1;
        this.referenceConnector = referenceConnector;
        this.groupConnectors << referenceConnector;
    }

    public point p0;
    public point p1;
    public str id;
    public str friendlyName;
    public AweConnectLine referenceConnector : copy=reference;
    public AweConnectLine{} groupConnectors() : copy=reference;

    extend public bool preferred(Connector c) {
        if(referenceConnector) {
            if(c as AweConnectLine) {
                if (this.referenceConnector.overrideGroupKey) {
                    return this.referenceConnector.overrideGroupKey == c.overrideGroupKey;
                }

                line oneWay = referenceConnector.spaceLine();
                line otherWay = flip(oneWay);
                line thisLine = c.spaceLine();

                if(thisLine.line2D == oneWay.line2D) return true;
                if(thisLine.line2D == otherWay.line2D) return true;
            }
        }
        return false;
    }


    extend public Graph get2D() {
        if(!this.id) return null;

        GInstance g();

        for (c in this.groupConnectors) {
            var l = new GLine(c.spaceLine().line2D);
            
            l.lineType = new cm.draw.LineType(cm.draw.blue, cm.draw.lineStyle.thick);

            g << l;
        }

        return g;
    }

    public str toS() {
        return this.friendlyName ?? this.autoName() ?? this.id;
    }

    extend public str autoName() {
        Snapper snapper = this.referenceConnector.?snapper;
        if(!snapper) return null;
        point reference = snapper.toSnapper(new line(this.p0, this.p1).midPoint);
        box bound = snapper.localBound();
        point boxMiddle = new line(bound.p0, bound.p1).midPoint;
        str name = "";
        if(reference.y > boxMiddle.y) name #= "Back ";
        if(reference.y < boxMiddle.y) name #= "Front ";
        if(reference.x > boxMiddle.x) name #= "Right ";
        if(reference.x < boxMiddle.x) name #= "Left ";
        name = name.removeHeadingAndTrailingSpace();
        if(name.count > 0) return name;
        return null;
    }

    public bool equal(Object other, EqualEnv env=EqualEnv()) {
        if (other as AwePreferredConnection) {
            return this.id == other.id;
        }

        return super(..);
    }
}

public int sortAntiClockwise(AwePreferredConnection a, AwePreferredConnection b, Object centerPoint) {
    if(centerPoint as Point2D) {
        var first = 90deg; //start from the top
        var angleA = angle(referencePoint(a.referenceConnector) - centerPoint.v) - first;
        var angleB = angle(referencePoint(b.referenceConnector) - centerPoint.v) - first;
        return compare(angleA.deg, angleB.deg);
    }
    return 0;
}

public point2D referencePoint(Connector c) {
    if(c as ConnectLine) {
        return c.snapperLine().midPoint().point2D;
    }
    return c.pos().point2D;
}