/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.connectors;

use cm.subset;

public class AweConnectLine extends ConnectLine {
    public aweDynamicContract {
        aweDynamic bool shouldRealign();
        aweDynamic bool isMandatory();
        aweDynamic void makeMandatory();
    }
    
    public str id;
    public bool hidden = false;
    public bool hiddenWhenDisconnected = false;
    public bool realign = false;

    public bool mandatory = false;
    extend public bool isMandatory() {
        return mandatory;
    }
    extend public void makeMandatory() {
        mandatory = true;
    }

    extend public bool shouldRealign() {
        return this.realign;
    }
    
    public bool isVisible() {
        return !hidden and !((hiddenWhenDisconnected and !this.isConnected()));
    }

    public constructor(Snapper snapper, point p0, point p1, angle roll=0deg, ConnectRule rule=null, bool realign=false) {
        super(snapper, p0, p1, roll);

        this.setRule(rule);
        this.realign = realign;
    }

    extend public void setRoll(point p0, point p1, angle roll) {
        if (p0.point2D == p1.point2D) {
            orientation o;
            o.roll =  (p0.z > p1.z) ? o.roll = 270deg : o.roll = 90deg;
            o.yaw = roll;
            this.setRot(o);
        }
        else {
            orientation o = orientation(p1 - p0);
            this.setRot(orientation(point(0, -this.length, 0).transformed(o)));
        }
    }

    /************** model connecting ******************/
    public modelConnecting;

    /************* adjusting size on trySnap ***************/
    public str autoSizePropKey;

    extend public void tryResizeToFit(Connector attach, line mouseLine) {
        if(attach as ConnectLine) {
            this.resizeToFit(attach, mouseLine);
        }
    }

    extend public void resizeToFit(ConnectLine attach, line mouseLine) {
        var domain = this.model.getDomain(autoSizePropKey);
        if(!domain or domain.empty) return;
        double[] sizes = this.preferredSizes(attach, mouseLine, domain);
        this.resizeToFit(sizes, domain);
    }

    extend private double[] preferredSizes(ConnectLine attach, line mouseLine, SubSet domain) {
        double[] sizes();

        //total space available in all aligned connectable lines
        //for instance an entire row of panels
        double availableSpace = attach.freeSpace(this, mouseLine);
        if(availableSpace == 0 and domain and !domain.empty) {
            //we get 0 here when the object doesn't fit the available space. so we set the size to the smallest possible domain size, which will triger the whole cycle again 
            //but next time we're smaller, so we might fit
            sizes << domain.closest(availableSpace).double;
            return sizes;
        }

        //size of one object (for instance, one panel)
        double oneLineLength = attach.length;
        double extraLengthFromNeighborLine = this.extraLength(attach, mouseLine);
        double twoLinesLength = oneLineLength + extraLengthFromNeighborLine;


        if(twoLinesLength <= availableSpace and twoLinesLength != oneLineLength) {
            sizes << twoLinesLength;
        }

        if(oneLineLength <= availableSpace) {
            sizes << oneLineLength;
        }

        //fullsize, half, third, etc.
        for(divisor in [1,2,3,4,5,6]) {
            sizes << availableSpace / divisor;
        }

        return sizes;
    }

    extend public double extraLength(ConnectLine attach, line mouseLine) {
        double mergeThreshold = .2;
        if(attach.j0 and attach.j0.perpendicularDistance(mouseLine) < mergeThreshold) {
            return attach.j0.length;
        }  
        if(attach.j1 and attach.j1.perpendicularDistance(mouseLine) < mergeThreshold) {
            return attach.j1.length;
        } 
        return 0;
    }


    extend public void resizeToFit(double[] sizes, SubSet domain) {
        for(s in sizes) {
            if(s in domain) {
                this.model.set(autoSizePropKey, s);
                this.model.invalidate();
                return;
            }
        }
        
    }

 }

 public double perpendicularDistance(ConnectLine cl, line mouseLine) {
    plane pl(cl.spaceRot().normal, cl.spacePos());
    point mouseLineToPlaneIntersection = mouseLine.intersect(pl).ip;
    point projection = cl.spaceLine().normalIntersectUnbounded(mouseLineToPlaneIntersection).ip;
    var p0Distance = cl.spaceLine().p0.distance(projection);
    var p1Distance = cl.spaceLine().p1.distance(projection);
    double d = p0Distance;
    if(p1Distance < d) {
        d = p1Distance;
    }
    return d;
 }