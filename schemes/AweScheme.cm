/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.schemes;
use cm.subset;
use cm.basic;
use cm.runtime;

public class AweScheme {
    public AweSchemeItem[] items();
    public str key;
    public str label;
    public AweObject model;

    public constructor(AweObject model, str label) {
        this.model = model;
        this.key = model.class.toS;
        this.label = label;
        for(key, value in model.props){
            var domainName = key # "Domain";
            var domainField = model.class.field(domainName);
            var domainValue = model.get(domainField);
            if(domainValue as SubSet) {
                AweSchemeItem item();
                item.key = key;
                item.initialValue = value;
                item.domain = domainValue;
                item.label = getLabel(model, key);
                this.items << item;
            }
        }
    } 

    extend private str getLabel(AweObject model, str key) {
        var labelFieldName = key # "Label";
        var labelField = model.class.field(labelFieldName);
        var labelValue = model.get(labelField);
        if(labelValue as str) {
            return labelValue;
        } else {
            return key;
        }
    }

    extend public void register() {
        AweSchemeEditor scheme(this);

        for(item in this.items) {
            scheme.append(item.key, item.label, item.domain, initValue=item.initialValue);
        }
    
        if (!schemeManager)
        initSchemeManager();
      
        if (schemeManager) {
            schemeManager.registerEditor(scheme);
        }
    }

    extend public void showDialog() {
        buildSchemeManagerDialog(this.key);
    }

    extend public AweObject convert(OfficeGroupScheme gs) {
        AweObject modelCopy = model.copy();
        for(key, value in modelCopy.props) {
            var schemeValue = gs.getSetting(key);
            modelCopy.set(key, schemeValue);
        }
        return modelCopy;
    }
}

public class AweSchemeItem {
    
    public constructor() { }

    public str key;
    public str label;
    public Object initialValue;
    public SubSet domain;
}

public aweObject TestSchemeModel {
    props(
        double width = 12inch,
        bool good = true
    );

    public aweObjectDomain(
        distance width = DistanceEnum(12inch, 24inch, 36inch),
        bool good = BoolSubSet()
    );
}

{
    TestSchemeModel model();
    AweScheme scheme(model, "My nice esquema");

    //this should be in the extension start event
    scheme.register();

    //this can go in a callbackbutton
    scheme.showDialog();
}